{"version":3,"sources":["reducer/app.js","App.js","reportWebVitals.js","index.js","converteAutomato.js"],"names":["reducer","state","action","type","payload","stateValue","value","rowsLength","rows","length","auxRows","auxStatesValues","statesValues","insideArray","Array","columns","fill","push","filter","_","index","states","inputValue","arraySize","columsArray","auxRowArray","target","i","j","splice","rowIndex","columnIndex","map","row","cell","initialState","auxFinalStates","finalStates","valueIndex","findIndex","item","automato","grammar","App","useReducer","symbols","dispatch","handleInputChange","handleButtonClick","forEach","estado","estadoIndex","auxArray","transicoes","entradas","transicao","indexTransicao","letter","undefined","getEntradas","estadoInicial","estadosFinais","finalIndex","afdToGr","changeGrammarTitles","variable","console","log","StateSelector","title","estaSelecionado","highlightClass","dispatchType","className","onClick","printItems","isArray","onChange","e","find","column","trim","handleStateQuantity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports","variavelInicial","variaveis","terminais","producoes","letras","chavesDosEstados","Object","keys","includes","letraAtribuida","variavel","values","entrada","estadoAtual","variavelAtual","destino","destinoAtual"],"mappings":"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","file":"static/js/main.90ab6d38.chunk.js","sourcesContent":["export const reducer = (state, action) => {\n  const { type, payload } = action\n\n  switch (type) {\n    case \"changeStateInput\":\n      const stateValue = payload.value\n\n      let rowsLength = state.rows.length\n      let auxRows = [...state.rows]\n      let auxStatesValues = [...state.statesValues]\n\n      if (stateValue > rowsLength) {\n        for (stateValue; rowsLength < stateValue; rowsLength++) {\n          let insideArray = Array(state.columns.length).fill(\"\")\n          auxRows.push(insideArray);\n          auxStatesValues.push(\"q\"+(stateValue-1))\n        }\n      } else {\n        auxRows = state.rows.filter(\n          (_, index) => index <= stateValue - 1)\n\n        auxStatesValues = auxStatesValues.filter(\n          (_, index) => index <= stateValue - 1)\n      }\n\n      return {\n        ...state,\n        states: stateValue,\n        rows: auxRows,\n        statesValues : auxStatesValues\n      }\n    case \"changeSymbolsInput\":\n      const inputValue = payload.value\n\n      let arraySize = state.columns.length\n      let columsArray = [...state.columns]\n      let auxRowArray = [...state.rows];\n\n      if (inputValue > state[payload.target]) {\n        for (inputValue; arraySize < inputValue; arraySize++) {\n          columsArray.push(\"\")\n        }\n\n        for (let i = 0; i < state.states; i++) {\n          for (let j = 0; j < inputValue; j++) {\n            if (!auxRowArray[i][j]) {\n              auxRowArray[i][j] = \"\"\n            }\n          }\n        }\n      } else {\n        for (let i = 0; i < state.states; i++) {\n          for (let j = state.columns.length; j >= inputValue; j--) {\n              auxRowArray[i].splice(j,1)\n          }\n        }\n        columsArray = state.columns.filter(\n          (_, index) => index <= inputValue - 1);\n      }\n\n      return {\n        ...state,\n        [payload.target]: payload.value,\n        columns: columsArray,\n        rows: auxRowArray\n      }\n\n    case \"changeStateQuantity\":\n      const { value, rowIndex, columnIndex } = payload;\n      return {\n        ...state,\n        rows: state.rows.map((row, i) => row.map((cell, j) => {\n          if (i === rowIndex && columnIndex === j) {\n            return value\n          } else {\n            return cell\n          }\n        }))\n      }\n    case \"changeInitialState\":\n      return {\n        ...state,\n        initialState: payload\n      }\n    case \"changeFinalState\":\n      let auxFinalStates = [...state.finalStates]\n\n      let valueIndex = auxFinalStates.findIndex((item) => item ===payload);\n\n      if(valueIndex >=0){\n        auxFinalStates.splice(valueIndex,1)\n      }else{\n        auxFinalStates.push(payload)\n      }\n      return {\n        ...state,\n        finalStates: auxFinalStates\n      }\n    case \"changeStateValue\":\n      return {\n        ...state,\n        statesValues: state.statesValues.map((value, i) =>{\n          if (i === payload.index) {\n            return payload.value\n          } else {\n            return value\n          }\n        })\n      }\n      case \"changeSymbol\":\n        return {\n          ...state,\n          columns: state.columns.map((value, i) =>{\n            if (i === payload.index) {\n              return payload.value\n            } else {\n              return value\n            }\n          })\n        }\n    case \"changeAutomato\":\n      return {\n        ...state,\n        automato : payload\n      }\n    case \"changeGrammar\":\n      return {\n        ...state,\n        grammar : payload\n      }\n    default:\n      break;\n  }\n}","import './App.css';\n\nimport { useReducer } from 'react';\nimport React from 'react';\nimport afdToGr from './converteAutomato'\nimport { reducer } from './reducer/app';\n\nfunction App() {\n  const INITIAL_STATE = {\n    states: 3,\n    symbols: 3,\n    columns: [\"a\", \"b\", \"c\"],\n    rows: [[\"q0\", \"q1\", \"\"], [\"q2\", \"\", \"\"], [\"\", \"q1\", \"\"]],\n    statesValues: [\"q0\", \"q1\", \"q2\"],\n    initialState: 0,\n    finalStates: [1],\n    automato : {},\n    grammar: null\n  }\n\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  const handleInputChange = (value, target) => {\n\n    if (value >= 1) {\n      if (target === 'states') {\n        dispatch({ type: 'changeStateInput', payload: { value, target } })\n      } else {\n        dispatch({ type: 'changeSymbolsInput', payload: { value, target } })\n      }\n    }\n  }\n\n  const handleStateQuantity = (value, rowIndex, columnIndex) => {\n    dispatch({ type: 'changeStateQuantity', payload: { value, rowIndex, columnIndex } })\n  }\n\n  const handleStateValue = (index,value) => {\n    dispatch({ type: 'changeStateValue', payload: { index,value:value.trim() } })\n\n  }\n\n\n  const getEntradas = (index) =>{\n    \n    let auxArray = [...state.rows[index]]\n    let transicoes = {}\n    let entradas =  auxArray.map((transicao,indexTransicao) => {\n      if(transicao!== ''){\n        let letter = state.columns[indexTransicao]\n        transicoes[letter] = transicao;\n        return letter;\n      }\n    }).filter(value => value !== undefined);\n\n    return {entradas,transicoes}\n  }\n\n  const handleButtonClick = () => {\n    let automato = {}\n    state.statesValues.forEach((estado,estadoIndex) => {\n      let {entradas,transicoes} = getEntradas(estadoIndex);\n      automato[estado] = {\n        entradas,\n        transicoes\n      }\n    });\n\n    dispatch({type : 'changeAutomato',payload : automato});\n\n    let estadoInicial = state.statesValues[state.initialState];\n\n    let estadosFinais = state.finalStates.map(finalIndex => state.statesValues[finalIndex])\n\n    let grammar = afdToGr(estadoInicial,estadosFinais,automato);\n\n    dispatch({ type: 'changeGrammar', payload: grammar })\n\n  }\n\n  const finalStateIsSelected = (index) => {\n    let isSelected = state.finalStates.find(item => index ===item);\n\n    return isSelected >= 0 ? true : false\n  }\n\n  const initialStateIsSelected = (index) => {\n    return state.initialState === index ? true : false\n  }\n\n  const changeGrammarTitles = (variable) => {\n    console.log(variable)\n    switch (variable) {\n      case 'variaveis':\n        return 'Variáveis:';\n      case 'terminais':\n        return 'Terminais:';\n      case 'producoes':\n        return 'Produções:';\n    }\n  }\n\n  const StateSelector = ({title,estaSelecionado,highlightClass,dispatchType}) => {\n    return (\n      <div key={title} className=\"stateContainer\">\n        <label className=\"\">{title}</label>\n        <div>\n        {state.statesValues.map((value,index) =>\n          <button type=\"button\" \n          className={`states ${estaSelecionado(index) ? highlightClass : ''}`}\n          onClick={() => dispatch({ type: dispatchType, payload: index })}\n          >\n            {value}\n          </button>)}\n        </div>\n      </div>\n    )\n  }\n\n  const printItems = (variable, isArray = true) => {\n    if(!isArray){\n      return <div>\n      <h4>Variável inicial:</h4>\n      {state.grammar[variable]}\n      </div>\n    }\n    return <div>\n      <h4>{changeGrammarTitles(variable)}</h4>\n      {state.grammar[variable].map(item => <span>{item}</span>)}\n    </div>\n  }\n\n  const handleChangeSymbol = (index,value)=>{\n    dispatch({ type: 'changeSymbol', payload: {index,value} })\n  }\n\n  return (\n    <div className=\"app\">\n      <header >\n        <h1>Conversor AFD para Gramática Regular</h1>\n      </header>\n      <div className=\"options\">\n        <div className='quantitySelector'>\n          <label>Quantidade de estados:</label>\n          <input\n            type=\"number\"\n            value={state.states}\n            onChange={(e) => handleInputChange(e.target.value, 'states')}\n          />\n        </div>\n        <div className='quantitySelector'>\n        <label>Quantidade de símbolos:</label>\n          <input\n            type=\"number\"\n            value={state.symbols}\n            onChange={(e) => handleInputChange(e.target.value, 'symbols')}\n          />\n        </div>\n        <StateSelector\n          title=\"Qual o estado inicial?\"\n          estaSelecionado={initialStateIsSelected}\n          dispatchType=\"changeInitialState\"\n          highlightClass=\"initialState\"\n        />\n        <StateSelector\n          title=\"Qual(is) o(s) estado(s) final(is)?\"\n          estaSelecionado={finalStateIsSelected}\n          dispatchType=\"changeFinalState\"\n          highlightClass=\"finalState\"\n        />\n      </div>\n      <main>\n        <table>\n          <thead>\n            <tr>\n              <th className=\"no-bottom-border\">\t&delta;</th>\n              {state.columns.map((column,rowIndex) => (\n                <th>\n                  <input type=\"text\" value={column} onChange={(e) => handleChangeSymbol(rowIndex,e.target.value)} />\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {state.rows.map((row, rowIndex) => {\n              return (\n                <tr >\n                  <td  className=\"stateColumn\">\n                    <input type=\"text\" value={state.statesValues[rowIndex]} onChange={(e) => handleStateValue(rowIndex,e.target.value)} />\n                  </td>\n                  {row.map((cell, columnIndex) => {\n                    return (\n                      <td>\n                        <input type=\"text\" value={cell} onChange={(e) => handleStateQuantity(e.target.value.trim(), rowIndex, columnIndex)} />\n                      </td>\n                    )\n                  })}\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n        <div className=\"resultContainer\">\n          <button className=\"convertButton\" onClick={() => handleButtonClick()}>Converter para GR</button>\n        \n          {state.grammar && \n          <div className=\"resultContainer\">\n            <h3>Gramática:</h3>\n            {printItems('variaveis')}\n            {printItems('terminais')}\n            {printItems('producoes')}\n            {printItems('variavelInicial',false)}\n          </div>\n          }\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","function afdToGr(estadoInicial, estadosFinais, transicoes) {\n  let variaveis = [];\n  let terminais = [];\n  let producoes = [];\n  let variavelInicial = '';\n  let letras = ['S', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n      'M', 'N', 'O', 'P', 'Q', 'R'];\n\n  let chavesDosEstados = Object.keys(transicoes);\n\n  //Identifica variaveis\n  Object.keys(transicoes).forEach((estado,index) => {\n    if (!variaveis.includes(estado)) {\n      let letraAtribuida = letras[index];\n      \n      transicoes[chavesDosEstados[index]].variavel = letraAtribuida;\n\n      variaveis.push(letraAtribuida);\n    }\n  })\n\n  //Identifica terminais\n  Object.values(transicoes).forEach(estado => {\n    estado.entradas.forEach(entrada => {\n      if (!terminais.includes(entrada)) terminais.push(entrada);\n    }); \n  });\n  \n  //Define producoes\n  Object.values(transicoes).forEach((estado, index) => {\n    let estadoAtual =chavesDosEstados[index];\n\n    if(estadosFinais.includes(estadoAtual)){\n      producoes.push(transicoes[estadoAtual].variavel+` → ε`)\n    }\n    let variavelAtual = transicoes[estadoAtual].variavel\n\n    estado.entradas.forEach(entrada => {\n      let destino = estado.transicoes[entrada] //q0\n\n      let destinoAtual = transicoes[destino].variavel\n      \n      producoes.push(`${variavelAtual} → ${entrada+destinoAtual}`)\n    }); \n  });\n\n  variavelInicial = transicoes[estadoInicial].variavel;\n\n  // console.log('variaveis:', variaveis, '\\nterminais:', terminais, '\\nproducoes:', producoes, '\\nvariavelInicial:', variavelInicial);\n\n  return {\n    variaveis: variaveis,\n    terminais: terminais,\n    producoes: producoes,\n    variavelInicial: variavelInicial\n  }\n}\n\nmodule.exports = afdToGr;"],"sourceRoot":""}